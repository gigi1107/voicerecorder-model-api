/*
 * Phrase Recorder API
 * This is the API for the Phrase Recorder App.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gdavidson1107@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.Phrase;
import org.openapitools.client.model.Recording;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserPhrase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-09T22:17:02.516303-07:00[America/Los_Angeles]")
public class UserPhrase {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public static final String SERIALIZED_NAME_PHRASE = "phrase";
  @SerializedName(SERIALIZED_NAME_PHRASE)
  private Phrase phrase;

  public static final String SERIALIZED_NAME_RECORDING = "recording";
  @SerializedName(SERIALIZED_NAME_RECORDING)
  private Recording recording;

  public static final String SERIALIZED_NAME_RECORDING_SERIES = "recordingSeries";
  @SerializedName(SERIALIZED_NAME_RECORDING_SERIES)
  private Long recordingSeries;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_FILE_PATH = "filePath";
  @SerializedName(SERIALIZED_NAME_FILE_PATH)
  private String filePath;

  public UserPhrase() {
  }

  public UserPhrase id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public UserPhrase user(User user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public User getUser() {
    return user;
  }


  public void setUser(User user) {
    this.user = user;
  }


  public UserPhrase phrase(Phrase phrase) {
    
    this.phrase = phrase;
    return this;
  }

   /**
   * Get phrase
   * @return phrase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Phrase getPhrase() {
    return phrase;
  }


  public void setPhrase(Phrase phrase) {
    this.phrase = phrase;
  }


  public UserPhrase recording(Recording recording) {
    
    this.recording = recording;
    return this;
  }

   /**
   * Get recording
   * @return recording
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Recording getRecording() {
    return recording;
  }


  public void setRecording(Recording recording) {
    this.recording = recording;
  }


  public UserPhrase recordingSeries(Long recordingSeries) {
    
    this.recordingSeries = recordingSeries;
    return this;
  }

   /**
   * Get recordingSeries
   * @return recordingSeries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getRecordingSeries() {
    return recordingSeries;
  }


  public void setRecordingSeries(Long recordingSeries) {
    this.recordingSeries = recordingSeries;
  }


  public UserPhrase date(String date) {
    
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDate() {
    return date;
  }


  public void setDate(String date) {
    this.date = date;
  }


  public UserPhrase filePath(String filePath) {
    
    this.filePath = filePath;
    return this;
  }

   /**
   * Get filePath
   * @return filePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFilePath() {
    return filePath;
  }


  public void setFilePath(String filePath) {
    this.filePath = filePath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserPhrase userPhrase = (UserPhrase) o;
    return Objects.equals(this.id, userPhrase.id) &&
        Objects.equals(this.user, userPhrase.user) &&
        Objects.equals(this.phrase, userPhrase.phrase) &&
        Objects.equals(this.recording, userPhrase.recording) &&
        Objects.equals(this.recordingSeries, userPhrase.recordingSeries) &&
        Objects.equals(this.date, userPhrase.date) &&
        Objects.equals(this.filePath, userPhrase.filePath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, user, phrase, recording, recordingSeries, date, filePath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserPhrase {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    phrase: ").append(toIndentedString(phrase)).append("\n");
    sb.append("    recording: ").append(toIndentedString(recording)).append("\n");
    sb.append("    recordingSeries: ").append(toIndentedString(recordingSeries)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("user");
    openapiFields.add("phrase");
    openapiFields.add("recording");
    openapiFields.add("recordingSeries");
    openapiFields.add("date");
    openapiFields.add("filePath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserPhrase
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (UserPhrase.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserPhrase is not found in the empty JSON string", UserPhrase.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UserPhrase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserPhrase` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
      // validate the optional field `phrase`
      if (jsonObj.get("phrase") != null && !jsonObj.get("phrase").isJsonNull()) {
        Phrase.validateJsonObject(jsonObj.getAsJsonObject("phrase"));
      }
      // validate the optional field `recording`
      if (jsonObj.get("recording") != null && !jsonObj.get("recording").isJsonNull()) {
        Recording.validateJsonObject(jsonObj.getAsJsonObject("recording"));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("filePath") != null && !jsonObj.get("filePath").isJsonNull()) && !jsonObj.get("filePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filePath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserPhrase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserPhrase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserPhrase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserPhrase.class));

       return (TypeAdapter<T>) new TypeAdapter<UserPhrase>() {
           @Override
           public void write(JsonWriter out, UserPhrase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserPhrase read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserPhrase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserPhrase
  * @throws IOException if the JSON string is invalid with respect to UserPhrase
  */
  public static UserPhrase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserPhrase.class);
  }

 /**
  * Convert an instance of UserPhrase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

