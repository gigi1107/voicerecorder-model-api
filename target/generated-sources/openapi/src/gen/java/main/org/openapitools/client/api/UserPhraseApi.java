/*
 * Phrase Recorder API
 * This is the API for the Phrase Recorder App.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gdavidson1107@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.UserPhrase;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UserPhraseApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserPhraseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserPhraseApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteUserPhraseDb
     * @param userPhraseId The userPhrase Id of the userPhrase you want to delete from the Database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserPhraseDbCall(Long userPhraseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userPhrase/database/{userPhraseId}"
            .replaceAll("\\{" + "userPhraseId" + "\\}", localVarApiClient.escapeString(userPhraseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserPhraseDbValidateBeforeCall(Long userPhraseId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userPhraseId' is set
        if (userPhraseId == null) {
            throw new ApiException("Missing the required parameter 'userPhraseId' when calling deleteUserPhraseDb(Async)");
        }
        

        okhttp3.Call localVarCall = deleteUserPhraseDbCall(userPhraseId, _callback);
        return localVarCall;

    }

    /**
     * Delete a userPhrase from Database
     * 
     * @param userPhraseId The userPhrase Id of the userPhrase you want to delete from the Database (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUserPhraseDb(Long userPhraseId) throws ApiException {
        deleteUserPhraseDbWithHttpInfo(userPhraseId);
    }

    /**
     * Delete a userPhrase from Database
     * 
     * @param userPhraseId The userPhrase Id of the userPhrase you want to delete from the Database (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserPhraseDbWithHttpInfo(Long userPhraseId) throws ApiException {
        okhttp3.Call localVarCall = deleteUserPhraseDbValidateBeforeCall(userPhraseId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a userPhrase from Database (asynchronously)
     * 
     * @param userPhraseId The userPhrase Id of the userPhrase you want to delete from the Database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserPhraseDbAsync(Long userPhraseId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserPhraseDbValidateBeforeCall(userPhraseId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserPhraseS3
     * @param userPhraseId The userPhraseID of the userPhrase you want to delete from S3 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserPhrase Id not found in S3. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserPhraseS3Call(Long userPhraseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userPhrase/s3/{userPhraseId}"
            .replaceAll("\\{" + "userPhraseId" + "\\}", localVarApiClient.escapeString(userPhraseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserPhraseS3ValidateBeforeCall(Long userPhraseId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userPhraseId' is set
        if (userPhraseId == null) {
            throw new ApiException("Missing the required parameter 'userPhraseId' when calling deleteUserPhraseS3(Async)");
        }
        

        okhttp3.Call localVarCall = deleteUserPhraseS3Call(userPhraseId, _callback);
        return localVarCall;

    }

    /**
     * Delete a userPhrase from S3
     * 
     * @param userPhraseId The userPhraseID of the userPhrase you want to delete from S3 (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserPhrase Id not found in S3. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUserPhraseS3(Long userPhraseId) throws ApiException {
        deleteUserPhraseS3WithHttpInfo(userPhraseId);
    }

    /**
     * Delete a userPhrase from S3
     * 
     * @param userPhraseId The userPhraseID of the userPhrase you want to delete from S3 (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserPhrase Id not found in S3. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserPhraseS3WithHttpInfo(Long userPhraseId) throws ApiException {
        okhttp3.Call localVarCall = deleteUserPhraseS3ValidateBeforeCall(userPhraseId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a userPhrase from S3 (asynchronously)
     * 
     * @param userPhraseId The userPhraseID of the userPhrase you want to delete from S3 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserPhrase Id not found in S3. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserPhraseS3Async(Long userPhraseId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserPhraseS3ValidateBeforeCall(userPhraseId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editUserPhraseDatabase
     * @param userPhrase UserPhrase object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editUserPhraseDatabaseCall(UserPhrase userPhrase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userPhrase;

        // create path and map variables
        String localVarPath = "/userPhrase/database";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editUserPhraseDatabaseValidateBeforeCall(UserPhrase userPhrase, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userPhrase' is set
        if (userPhrase == null) {
            throw new ApiException("Missing the required parameter 'userPhrase' when calling editUserPhraseDatabase(Async)");
        }
        

        okhttp3.Call localVarCall = editUserPhraseDatabaseCall(userPhrase, _callback);
        return localVarCall;

    }

    /**
     * Edit a userPhrase to Database
     * 
     * @param userPhrase UserPhrase object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public void editUserPhraseDatabase(UserPhrase userPhrase) throws ApiException {
        editUserPhraseDatabaseWithHttpInfo(userPhrase);
    }

    /**
     * Edit a userPhrase to Database
     * 
     * @param userPhrase UserPhrase object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> editUserPhraseDatabaseWithHttpInfo(UserPhrase userPhrase) throws ApiException {
        okhttp3.Call localVarCall = editUserPhraseDatabaseValidateBeforeCall(userPhrase, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Edit a userPhrase to Database (asynchronously)
     * 
     * @param userPhrase UserPhrase object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editUserPhraseDatabaseAsync(UserPhrase userPhrase, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editUserPhraseDatabaseValidateBeforeCall(userPhrase, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editUserPhraseS3
     * @param userPhrase UserPhrase object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editUserPhraseS3Call(UserPhrase userPhrase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userPhrase;

        // create path and map variables
        String localVarPath = "/userPhrase/s3";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editUserPhraseS3ValidateBeforeCall(UserPhrase userPhrase, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userPhrase' is set
        if (userPhrase == null) {
            throw new ApiException("Missing the required parameter 'userPhrase' when calling editUserPhraseS3(Async)");
        }
        

        okhttp3.Call localVarCall = editUserPhraseS3Call(userPhrase, _callback);
        return localVarCall;

    }

    /**
     * Edits a userPhrase in S3
     * 
     * @param userPhrase UserPhrase object (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public Object editUserPhraseS3(UserPhrase userPhrase) throws ApiException {
        ApiResponse<Object> localVarResp = editUserPhraseS3WithHttpInfo(userPhrase);
        return localVarResp.getData();
    }

    /**
     * Edits a userPhrase in S3
     * 
     * @param userPhrase UserPhrase object (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> editUserPhraseS3WithHttpInfo(UserPhrase userPhrase) throws ApiException {
        okhttp3.Call localVarCall = editUserPhraseS3ValidateBeforeCall(userPhrase, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edits a userPhrase in S3 (asynchronously)
     * 
     * @param userPhrase UserPhrase object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editUserPhraseS3Async(UserPhrase userPhrase, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = editUserPhraseS3ValidateBeforeCall(userPhrase, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserPhraseDb
     * @param userPhraseId The userPhrase Id of the userPhrase you want to get from the Database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPhraseDbCall(Long userPhraseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userPhrase/database/{userPhraseId}"
            .replaceAll("\\{" + "userPhraseId" + "\\}", localVarApiClient.escapeString(userPhraseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPhraseDbValidateBeforeCall(Long userPhraseId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userPhraseId' is set
        if (userPhraseId == null) {
            throw new ApiException("Missing the required parameter 'userPhraseId' when calling getUserPhraseDb(Async)");
        }
        

        okhttp3.Call localVarCall = getUserPhraseDbCall(userPhraseId, _callback);
        return localVarCall;

    }

    /**
     * Gets a userPhrase by ID from Database
     * 
     * @param userPhraseId The userPhrase Id of the userPhrase you want to get from the Database (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public void getUserPhraseDb(Long userPhraseId) throws ApiException {
        getUserPhraseDbWithHttpInfo(userPhraseId);
    }

    /**
     * Gets a userPhrase by ID from Database
     * 
     * @param userPhraseId The userPhrase Id of the userPhrase you want to get from the Database (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getUserPhraseDbWithHttpInfo(Long userPhraseId) throws ApiException {
        okhttp3.Call localVarCall = getUserPhraseDbValidateBeforeCall(userPhraseId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets a userPhrase by ID from Database (asynchronously)
     * 
     * @param userPhraseId The userPhrase Id of the userPhrase you want to get from the Database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPhraseDbAsync(Long userPhraseId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPhraseDbValidateBeforeCall(userPhraseId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserPhraseS3
     * @param userPhraseId The userPhraseID of the userPhrase you want to get from S3 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserPhrase Id not found in S3. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPhraseS3Call(Long userPhraseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userPhrase/s3/{userPhraseId}"
            .replaceAll("\\{" + "userPhraseId" + "\\}", localVarApiClient.escapeString(userPhraseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPhraseS3ValidateBeforeCall(Long userPhraseId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userPhraseId' is set
        if (userPhraseId == null) {
            throw new ApiException("Missing the required parameter 'userPhraseId' when calling getUserPhraseS3(Async)");
        }
        

        okhttp3.Call localVarCall = getUserPhraseS3Call(userPhraseId, _callback);
        return localVarCall;

    }

    /**
     * Get a userPhrase by ID from S3
     * 
     * @param userPhraseId The userPhraseID of the userPhrase you want to get from S3 (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserPhrase Id not found in S3. </td><td>  -  </td></tr>
     </table>
     */
    public void getUserPhraseS3(Long userPhraseId) throws ApiException {
        getUserPhraseS3WithHttpInfo(userPhraseId);
    }

    /**
     * Get a userPhrase by ID from S3
     * 
     * @param userPhraseId The userPhraseID of the userPhrase you want to get from S3 (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserPhrase Id not found in S3. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getUserPhraseS3WithHttpInfo(Long userPhraseId) throws ApiException {
        okhttp3.Call localVarCall = getUserPhraseS3ValidateBeforeCall(userPhraseId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a userPhrase by ID from S3 (asynchronously)
     * 
     * @param userPhraseId The userPhraseID of the userPhrase you want to get from S3 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> UserPhrase Id not found in S3. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPhraseS3Async(Long userPhraseId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPhraseS3ValidateBeforeCall(userPhraseId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveUserPhraseDatabase
     * @param userPhrase UserPhrase object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveUserPhraseDatabaseCall(UserPhrase userPhrase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userPhrase;

        // create path and map variables
        String localVarPath = "/userPhrase/database";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveUserPhraseDatabaseValidateBeforeCall(UserPhrase userPhrase, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userPhrase' is set
        if (userPhrase == null) {
            throw new ApiException("Missing the required parameter 'userPhrase' when calling saveUserPhraseDatabase(Async)");
        }
        

        okhttp3.Call localVarCall = saveUserPhraseDatabaseCall(userPhrase, _callback);
        return localVarCall;

    }

    /**
     * Saves a userPhrase to Database
     * 
     * @param userPhrase UserPhrase object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public void saveUserPhraseDatabase(UserPhrase userPhrase) throws ApiException {
        saveUserPhraseDatabaseWithHttpInfo(userPhrase);
    }

    /**
     * Saves a userPhrase to Database
     * 
     * @param userPhrase UserPhrase object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveUserPhraseDatabaseWithHttpInfo(UserPhrase userPhrase) throws ApiException {
        okhttp3.Call localVarCall = saveUserPhraseDatabaseValidateBeforeCall(userPhrase, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Saves a userPhrase to Database (asynchronously)
     * 
     * @param userPhrase UserPhrase object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveUserPhraseDatabaseAsync(UserPhrase userPhrase, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveUserPhraseDatabaseValidateBeforeCall(userPhrase, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveUserPhraseS3
     * @param userPhrase UserPhrase object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveUserPhraseS3Call(UserPhrase userPhrase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userPhrase;

        // create path and map variables
        String localVarPath = "/userPhrase/s3";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveUserPhraseS3ValidateBeforeCall(UserPhrase userPhrase, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userPhrase' is set
        if (userPhrase == null) {
            throw new ApiException("Missing the required parameter 'userPhrase' when calling saveUserPhraseS3(Async)");
        }
        

        okhttp3.Call localVarCall = saveUserPhraseS3Call(userPhrase, _callback);
        return localVarCall;

    }

    /**
     * Saves a userPhrase to S3
     * 
     * @param userPhrase UserPhrase object (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public String saveUserPhraseS3(UserPhrase userPhrase) throws ApiException {
        ApiResponse<String> localVarResp = saveUserPhraseS3WithHttpInfo(userPhrase);
        return localVarResp.getData();
    }

    /**
     * Saves a userPhrase to S3
     * 
     * @param userPhrase UserPhrase object (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> saveUserPhraseS3WithHttpInfo(UserPhrase userPhrase) throws ApiException {
        okhttp3.Call localVarCall = saveUserPhraseS3ValidateBeforeCall(userPhrase, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a userPhrase to S3 (asynchronously)
     * 
     * @param userPhrase UserPhrase object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveUserPhraseS3Async(UserPhrase userPhrase, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveUserPhraseS3ValidateBeforeCall(userPhrase, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
