/*
 * Phrase Recorder API
 * This is the API for the Phrase Recorder App.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: gdavidson1107@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Phrase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-02T18:19:31.815332-07:00[America/Los_Angeles]")
public class Phrase {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_ORIGINAL = "original";
  @SerializedName(SERIALIZED_NAME_ORIGINAL)
  private String original;

  public static final String SERIALIZED_NAME_TRANSLATION = "translation";
  @SerializedName(SERIALIZED_NAME_TRANSLATION)
  private String translation;

  public static final String SERIALIZED_NAME_EXAMPLE_RECORDING = "exampleRecording";
  @SerializedName(SERIALIZED_NAME_EXAMPLE_RECORDING)
  private String exampleRecording;

  public Phrase() {
  }

  public Phrase id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public Phrase original(String original) {
    
    this.original = original;
    return this;
  }

   /**
   * Get original
   * @return original
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOriginal() {
    return original;
  }


  public void setOriginal(String original) {
    this.original = original;
  }


  public Phrase translation(String translation) {
    
    this.translation = translation;
    return this;
  }

   /**
   * Get translation
   * @return translation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTranslation() {
    return translation;
  }


  public void setTranslation(String translation) {
    this.translation = translation;
  }


  public Phrase exampleRecording(String exampleRecording) {
    
    this.exampleRecording = exampleRecording;
    return this;
  }

   /**
   * Get exampleRecording
   * @return exampleRecording
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExampleRecording() {
    return exampleRecording;
  }


  public void setExampleRecording(String exampleRecording) {
    this.exampleRecording = exampleRecording;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Phrase phrase = (Phrase) o;
    return Objects.equals(this.id, phrase.id) &&
        Objects.equals(this.original, phrase.original) &&
        Objects.equals(this.translation, phrase.translation) &&
        Objects.equals(this.exampleRecording, phrase.exampleRecording);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, original, translation, exampleRecording);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Phrase {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    original: ").append(toIndentedString(original)).append("\n");
    sb.append("    translation: ").append(toIndentedString(translation)).append("\n");
    sb.append("    exampleRecording: ").append(toIndentedString(exampleRecording)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("original");
    openapiFields.add("translation");
    openapiFields.add("exampleRecording");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Phrase
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Phrase.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Phrase is not found in the empty JSON string", Phrase.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Phrase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Phrase` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("original") != null && !jsonObj.get("original").isJsonNull()) && !jsonObj.get("original").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original").toString()));
      }
      if ((jsonObj.get("translation") != null && !jsonObj.get("translation").isJsonNull()) && !jsonObj.get("translation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `translation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("translation").toString()));
      }
      if ((jsonObj.get("exampleRecording") != null && !jsonObj.get("exampleRecording").isJsonNull()) && !jsonObj.get("exampleRecording").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exampleRecording` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exampleRecording").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Phrase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Phrase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Phrase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Phrase.class));

       return (TypeAdapter<T>) new TypeAdapter<Phrase>() {
           @Override
           public void write(JsonWriter out, Phrase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Phrase read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Phrase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Phrase
  * @throws IOException if the JSON string is invalid with respect to Phrase
  */
  public static Phrase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Phrase.class);
  }

 /**
  * Convert an instance of Phrase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

